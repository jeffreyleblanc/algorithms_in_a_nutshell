/*
	Essentially tries to make as much forward progress as possible from the seed,
	making random branching decisions as it goes.
	Once no further progress is possible, backtracks and iterates.
	Using a white, gray, black coloring scheme to track where it has been.
	Note paths generated by DFS may not be the shortest possible
	computes for each node/vertex:
		pred, the node leading back to source
		discovered, counter value when first visited
		finished, counter value when all outgoing links investigated
	Note can also compute edge type: tree, back, forward, cross
	Implemented here, but with some ambiguity. See pages 147-148
*/

function depthFirstSearch( graph, s ){

	// 1. Check we have proper pointers
	if( s == null ){ $.C('No source defined!');return; }
	else $.C('Runnning on '+graph.id()+' '+s.id());

	// 2. Reset
	graph.resetAnalysis();

	// 3. Setup for analysis
	var V = graph.U.nodes.cO.L;
	$.each( V, function(i,v){
		v.A.pred = null;
		v.A.discovered = -1;
		v.A.finished = -1;
		v.A.color = 'W';
	});

	// 4. Run
	window.counter = 0; // defines as global
	dfs_visit( s );
	$.each( V, function(i,v){

		if( v.A.color == 'W')
			dfs_visit( v );
	});

	// 5. Output Results
	$.each( V, function(i,v){
		v.setMetaText(
			v.A.pred != null ?
			'pred : ' + v.A.pred.A.id +'<br>discovered: '+v.A.discovered+'<br>finished: '+v.A.finished
			:
			'pred : NULL'+'<br>discovered: '+v.A.discovered+'<br>finished: '+v.A.finished
		);
	});
};

function dfs_visit( u ){

	u.A.color = 'G';
	u.A.discovered = ++window.counter;

	N = u.getLinkedNodes();
	$.each( N, function(i,v){
		
		//Compute type
		var e = u.getLinkingEdgeByPtr( v );
		// ! note that we could keep a list of types, instead of just the last one...
		if( e.A.edgetype == ''){
			e.A.edgetype = 'cross';
			if( v.A.color == 'W'){ e.A.edgetype = 'tree'; }
			else if( v.A.color == 'G'){ e.A.edgetype = 'back'; }
			else if( u.A.discovered < v.A.discovered ){ e.A.edgetype = 'forward'; }
		}

		if( v.A.color == 'W'){
			v.A.pred = u;
			dfs_visit( v );
		}
	});

	u.A.color = 'K';
	u.A.finished = ++window.counter;
}

